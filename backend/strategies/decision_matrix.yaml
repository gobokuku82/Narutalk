# Decision Matrix Configuration
# LLM 기반 의사결정 매트릭스 및 전략

decision_matrix:
  version: "1.0.0"
  description: "Multi-agent 시스템의 의사결정 로직 정의"

# 의사결정 레벨
decision_levels:
  level_1_intent:
    name: "Primary Intent Classification"
    description: "최상위 사용자 의도 분류"
    categories:
      analysis:
        keywords: ["분석", "통계", "실적", "추이", "비교"]
        confidence_threshold: 0.7
        primary_agent: "analysis_agent"
        
      search:
        keywords: ["검색", "찾아", "조회", "확인", "정보"]
        confidence_threshold: 0.6
        primary_agent: "search_agent"
        
      document:
        keywords: ["문서", "보고서", "작성", "생성", "만들어"]
        confidence_threshold: 0.75
        primary_agent: "document_agent"
        
      customer:
        keywords: ["고객", "거래처", "병원", "의사", "맞춤"]
        confidence_threshold: 0.7
        primary_agent: "customer_agent"
        
  level_2_complexity:
    name: "Query Complexity Assessment"
    description: "질의 복잡도 평가"
    factors:
      - entity_count: 
          weight: 0.2
          scoring: "linear"
      - time_range:
          weight: 0.15
          scoring: "exponential"
      - data_sources:
          weight: 0.25
          scoring: "logarithmic"
      - output_complexity:
          weight: 0.2
          scoring: "step"
      - cross_functional:
          weight: 0.2
          scoring: "binary"
          
    complexity_levels:
      simple:
        score_range: [0, 0.3]
        max_agents: 1
        execution: "sequential"
        
      moderate:
        score_range: [0.3, 0.7]
        max_agents: 2
        execution: "mixed"
        
      complex:
        score_range: [0.7, 1.0]
        max_agents: 4
        execution: "parallel"
        
  level_3_routing:
    name: "Agent Routing Decision"
    description: "에이전트 라우팅 결정"
    strategies:
      single_agent:
        when: "complexity < 0.3 AND confidence > 0.8"
        action: "route_to_primary"
        
      multi_agent_sequential:
        when: "complexity >= 0.3 AND complexity < 0.7"
        action: "create_sequence"
        
      multi_agent_parallel:
        when: "complexity >= 0.7 OR cross_functional = true"
        action: "parallel_execution"

# 에이전트 조합 패턴
agent_combinations:
  search_then_analyze:
    trigger: "데이터를 찾아서 분석"
    sequence: ["search_agent", "analysis_agent"]
    data_flow: "search_results -> analysis_input"
    
  analyze_then_document:
    trigger: "분석 결과를 보고서로"
    sequence: ["analysis_agent", "document_agent"]
    data_flow: "analysis_results -> document_content"
    
  customer_search_document:
    trigger: "고객 맞춤 자료 생성"
    sequence: ["customer_agent", "search_agent", "document_agent"]
    data_flow: "preferences -> search_criteria -> document_customization"
    
  comprehensive_report:
    trigger: "종합 보고서 작성"
    parallel: ["analysis_agent", "search_agent"]
    then: ["document_agent"]
    data_flow: "combined_results -> comprehensive_document"

# 신뢰도 점수 계산
confidence_scoring:
  factors:
    keyword_match:
      weight: 0.35
      method: "fuzzy_matching"
      
    pattern_match:
      weight: 0.25
      method: "regex_scoring"
      
    context_relevance:
      weight: 0.20
      method: "semantic_similarity"
      
    historical_accuracy:
      weight: 0.20
      method: "success_rate"
      
  thresholds:
    high_confidence: 0.85
    medium_confidence: 0.60
    low_confidence: 0.40
    
  actions_by_confidence:
    high:
      action: "execute_immediately"
      user_confirmation: false
      
    medium:
      action: "execute_with_monitoring"
      user_confirmation: "optional"
      
    low:
      action: "request_clarification"
      user_confirmation: true

# 동적 계획 수립
dynamic_planning:
  strategies:
    greedy:
      description: "가장 높은 신뢰도 경로 선택"
      use_when: "time_critical"
      
    comprehensive:
      description: "모든 관련 에이전트 활용"
      use_when: "accuracy_critical"
      
    balanced:
      description: "효율성과 정확도 균형"
      use_when: "default"
      
  plan_adjustment:
    triggers:
      - "intermediate_failure"
      - "new_information"
      - "user_feedback"
      - "timeout_approaching"
      
    actions:
      add_agent:
        when: "insufficient_data"
        selection: "capability_based"
        
      remove_agent:
        when: "redundant_results"
        criteria: "lowest_contribution"
        
      reorder:
        when: "dependency_change"
        method: "topological_sort"

# 충돌 해결
conflict_resolution:
  scenarios:
    contradictory_results:
      detection: "result_comparison"
      resolution:
        - "confidence_weighted_average"
        - "source_authority_ranking"
        - "recency_preference"
        - "user_arbitration"
        
    resource_competition:
      detection: "resource_monitoring"
      resolution:
        - "priority_based_allocation"
        - "time_slicing"
        - "queue_management"
        
    circular_dependency:
      detection: "dependency_graph_analysis"
      resolution:
        - "break_weakest_link"
        - "introduce_mediator"
        - "sequential_fallback"

# 인터럽트 처리
interrupt_handling:
  decision_points:
    pre_execution:
      - "high_risk_operation"
      - "sensitive_data_access"
      - "external_api_call"
      
    mid_execution:
      - "unexpected_result"
      - "threshold_exceeded"
      - "user_intervention"
      
    post_execution:
      - "quality_check_failed"
      - "compliance_violation"
      
  interrupt_strategies:
    immediate_halt:
      priority: "critical"
      rollback: true
      notify_user: true
      
    graceful_pause:
      priority: "high"
      save_state: true
      allow_resume: true
      
    checkpoint_wait:
      priority: "medium"
      complete_current: true
      wait_for_input: true

# 실행 최적화
execution_optimization:
  parallel_execution:
    max_parallel_agents: 3
    resource_allocation:
      cpu_shares: "equal"
      memory_limits: "dynamic"
      
    conditions:
      - "no_data_dependency"
      - "sufficient_resources"
      - "user_preference_allows"
      
  caching_strategy:
    cache_levels:
      - query_cache: 300  # seconds
      - result_cache: 3600
      - agent_cache: 1800
      
    invalidation:
      - "data_update"
      - "time_expiry"
      - "manual_refresh"
      
  batch_processing:
    enabled: true
    batch_size: 10
    conditions:
      - "similar_queries"
      - "same_agent_sequence"
      - "non_urgent"

# 품질 보증
quality_assurance:
  validation_checks:
    pre_execution:
      - input_validation
      - permission_check
      - resource_availability
      
    post_execution:
      - output_completeness
      - accuracy_verification
      - consistency_check
      
  quality_metrics:
    completeness:
      threshold: 0.95
      measurement: "required_fields_filled"
      
    accuracy:
      threshold: 0.90
      measurement: "validation_rules_passed"
      
    consistency:
      threshold: 0.85
      measurement: "cross_reference_match"

# 학습 메커니즘
learning_mechanism:
  feedback_collection:
    explicit:
      - user_ratings
      - correction_inputs
      - preference_selections
      
    implicit:
      - execution_time
      - retry_count
      - result_usage
      
  model_updates:
    frequency: "weekly"
    
    update_targets:
      - confidence_weights
      - routing_rules
      - combination_patterns
      
    validation:
      method: "a_b_testing"
      success_criteria: "performance_improvement > 5%"
      
  pattern_discovery:
    methods:
      - frequent_pattern_mining
      - sequence_analysis
      - clustering
      
    application:
      - new_combination_patterns
      - optimized_sequences
      - shortcut_identification
